---
title: "pnID_correlations"
format: html
editor: visual
---

## Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

## Running Code

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}
#| message: false
library (tidyverse)
library(dplyr)
library(ggplot2)
library(ggsignif)
```

```{r}
#| message: false

perm_test = function(data, perm_num = 9999)
{
  x = data |> filter(intrapn == 'Same subject') |> select(coral)
  y = data |> filter(intrapn == 'Different subjects')|> select(coral)
  
  res = list()
  x=x[!is.na(x)]
  y=y[!is.na(y)]
  
  xy_rank = rank(c(x,y))
  x = xy_rank[1:length(x)]
  y = xy_rank[ (length(x)+1):length(xy_rank) ]
  diff = abs(mean(x)-mean(y))
  
  count=0
  for ( i in 1:perm_num  )
  {
    perm_xy = sample( c( x,y) )
    perm_x = perm_xy[1:length(x)]
    perm_y = perm_xy[ (length(x)+1):length(perm_xy) ]
    perm_diff = abs(mean(perm_x)-mean(perm_y))
    if ( perm_diff >= diff)
      count = count+1
  }
  
  res$p.value = (count+1)/(perm_num+1)
  return(res$p.value)
}
```

```{r}

couples_function <- function(data,map){
  couples <- combn(map$SampleID, 2) |> data.frame() |> t() |> as.data.frame()
  couples$coral <- NA
  for (rown in 1:nrow(couples)) {
    cor2 = cor(data[couples[rown,'V1']], data[couples[rown,'V2']], method = "spearman")
  couples[rown, 'coral'] <- cor2
  }
  return(couples)
}
```

```{r}

pnID_function <- function(couples, map){
  map1 <- map |> select(SampleID,pn_ID) |> rename(V1 = SampleID, pnID1 = pn_ID)
  map2 <- map |> select(SampleID,pn_ID) |> rename(V2 = SampleID, pnID2 = pn_ID)
  longcor1 <- couples |> left_join(map1)
  longcor1 <- longcor1 |> left_join(map2)
  
  longcor1 <- longcor1 |> mutate(intrapn = as.character(pnID1 == pnID2))
  longcor1$intrapn <- longcor1$intrapn |> stringr:: str_replace('TRUE','Same subject') |> 
    stringr:: str_replace('FALSE','Different subjects')
  return(longcor1)
}
```

You can add options to executable code like this

```{r}
#| message: false

f_path1 <- "./"
```

```{r}
#| message: false

Serum_map <- 
  paste0(f_path1,"Datasets/Cohort1_Serum_metabolomics_metadata.txt") |> 
  read_tsv() |>
  rename(SampleID = Serum_Metabolomics_ID)
Serum_data <- 
  paste0(f_path1,"Datasets/Cohort1_Serum_metabolomics_data.csv") |> read_csv()

Stool_map <- 
  paste0(f_path1,"Datasets/Cohort1_Fecal_metabolomics_metadata.txt") |> 
  read_tsv() |>
  rename(SampleID = Fecal_Metabolomics_ID)
Stool_data <- 
  paste0(f_path1,"Datasets/Cohort1_Fecal_metabolomics_data.csv") |> read_csv()
```

```{r eval=FALSE}
#| message: false

cure_data <- paste0("MBX006_Data_s418f404_18Feb2024_NL.csv") |> read_csv()
cure_map <- paste0("./","CURE_nina_paper2_map_20jan25.tsv") |> 
  read_tsv() |> 
  filter(!is.na(metabolomics_ID))

intersect(cure_map$metabolomics_ID,colnames(cure_data)) |> length()
exclude_samples <- setdiff(cure_map$metabolomics_ID,colnames(cure_data))
cure_map <- cure_map |> filter(!(metabolomics_ID %in% exclude_samples))
cure_map1  <- cure_map |> select(-SampleID) |> rename(SampleID = metabolomics_ID) |> 
  filter(pn_flare != "Active")

cure_data <- cure_data |> select(Feature, all_of(cure_map1$SampleID))
```

```{r}
#| message: false

Serum_couples <- couples_function(Serum_data,Serum_map) 
Stool_couples <- couples_function(Stool_data,Stool_map)
cure_couples <- couples_function(cure_data,cure_map1)
```

```{r}
#| message: false

Serum_longcor1 <- pnID_function(Serum_couples,Serum_map) |> mutate(Type = "Serum")
Stool_longcor1 <- pnID_function(Stool_couples,Stool_map) |> mutate(Type = "Fecal")
cure_longcor1 <- pnID_function(cure_couples,cure_map1) |> mutate(Type = "Cohort 2")
```

```{r}
#| message: false

Serum_perm_results <- perm_test(Serum_longcor1 )
Stool_perm_results <- perm_test(Stool_longcor1)
cure_perm_results <- perm_test(cure_longcor1)

```

```{r}
#| message: false

all_longcor1 <- rbind(Serum_longcor1, Stool_longcor1) |> rbind(cure_longcor1) 

all_longcor1 <- all_longcor1 |> mutate(Type = str_replace(Type, "Serum|Fecal", paste0(Type,"\nCohort 1")))

all_longcor1$Type <- factor(all_longcor1$Type, 
                            levels = c("Serum\nCohort 1","Fecal\nCohort 1","Cohort 2"))

```

```{r}
#| message: false

s_size <- all_longcor1 |> group_by(Type,intrapn) |> 
  summarise(s_size = n())
  

all_longcor1 <- all_longcor1 |> group_by(Type,intrapn) |> 
  mutate(type_n = paste0(intrapn, "\n(n=",n(),")"))
all_longcor1$type_n |> unique()

comp_groups <- all_longcor1 |> group_by(Type,intrapn,type_n) |> 
  summarise()

gnames <- 
  comp_groups |> ungroup() |> group_by(Type) |> 
  summarise(aa=list(type_n)) |> pull(aa)
  
```

```{r}
#| message: false

subgroups_stats <- all_longcor1 |> group_by(Type,intrapn) |> 
  summarise(med = median(coral) |> round(2),
            q1 = quantile(coral,probs = 0.25) |> round(2),
            q3 = quantile(coral,probs = 0.75) |> round(2))
```

```{r}
#| message: false

pln <- all_longcor1 |> ggplot(aes(x=type_n, y=coral, fill = intrapn), show.legend = FALSE) + 
  geom_violin(show.legend = FALSE) +
  geom_boxplot(width = .3, show.legend = FALSE) +   
  labs(x = '', y = 'Spearman r') +
  facet_wrap(~Type, nrow = 1, scales = "free_x") +
  # geom_signif(comparisons = list(c("Same subject",
  #                                  "Different subjects")),
  #             map_signif_level = T, textsize =4.5, vjust = 0.5) +
  theme_bw() + 
    theme(panel.grid = element_blank(),
          plot.background = element_blank(),
          strip.background = element_rect(fill = "white"),
          axis.text = element_text(size=12),
          axis.text.x = element_text(angle = 45,  hjust=1),
          title = element_text(size = 6),
          axis.title = element_text(size = 16),
          strip.text = element_text(size = 14)) 
pln
```

```{r}
#| message: false

```

The `echo: false` option disables the printing of code (only output is displayed).

```{r}
#| message: false


```
